#!/usr/bin/env bash
#
# A helper to report the results for a scan against an ECR repository image
#

#set -x

# source common helpers
FULL_NAME=$(realpath $0)
SCRIPT_DIR=$(dirname $FULL_NAME)
. $SCRIPT_DIR/common.ksh

function show_use_and_exit {
   error_and_exit "use: $(basename $0) <ECR repository name> <image tag>"
}

function is_defined {
   local val=$1

   if [ -z "$val" -o "$val" == "null" ]; then
      echo -n "0"
      return
   fi

   echo -n $val
}

# ensure correct usage
if [ $# -lt 2 ]; then
   show_use_and_exit
fi

# input parameters for clarity
REPO_NAME=$1
shift
IMAGE_TAG=$1
shift

# disabled because we sometimes operate using roles
# check our environment requirements
# check_aws_environment

# ensure we have the necessary tools available
AWS_TOOL=aws
ensure_tool_available $AWS_TOOL
JQ_TOOL=jq
ensure_tool_available $JQ_TOOL

# temp file definition
TMPFILE=/tmp/image-vulnerability.$$

# report the results
$AWS_TOOL ecr describe-image-scan-findings --repository-name $REPO_NAME --region $AWS_DEFAULT_REGION --image-id "imageTag=$IMAGE_TAG" > $TMPFILE
exit_on_error $? "Error reporting results of vulnerability scan for $REPO_NAME$IMAGE_TAG"

# capture and output results
CRITICAL_COUNT=$(cat $TMPFILE | $JQ_TOOL ".imageScanFindings.findingSeverityCounts.CRITICAL")
CRITICAL_COUNT=$(is_defined $CRITICAL_COUNT)
HIGH_COUNT=$(cat $TMPFILE | $JQ_TOOL ".imageScanFindings.findingSeverityCounts.HIGH")
HIGH_COUNT=$(is_defined $HIGH_COUNT)
MEDIUM_COUNT=$(cat $TMPFILE | $JQ_TOOL ".imageScanFindings.findingSeverityCounts.MEDIUM")
MEDIUM_COUNT=$(is_defined $MEDIUM_COUNT)
LOW_COUNT=$(cat $TMPFILE | $JQ_TOOL ".imageScanFindings.findingSeverityCounts.LOW")
LOW_COUNT=$(is_defined $LOW_COUNT)
INFORMATIONAL_COUNT=$(cat $TMPFILE | $JQ_TOOL ".imageScanFindings.findingSeverityCounts.INFORMATIONAL")
INFORMATIONAL_COUNT=$(is_defined $INFORMATIONAL_COUNT)
UNDEFINED_COUNT=$(cat $TMPFILE | $JQ_TOOL ".imageScanFindings.findingSeverityCounts.UNDEFINED")
UNDEFINED_COUNT=$(is_defined $UNDEFINED_COUNT)

# add editorial content
EDITORIAL=""
if [ "$CRITICAL_COUNT" -gt 0 ]; then
   EDITORIAL="(WARNING!! CRITICAL > 0)"
fi

echo "$REPO_NAME => critical: $CRITICAL_COUNT high: $HIGH_COUNT medium: $MEDIUM_COUNT low: $LOW_COUNT info: $INFORMATIONAL_COUNT unknown: $UNDEFINED_COUNT $EDITORIAL"

# remove the tempfile
rm $TMPFILE > /dev/null 2>&1

# all over
exit 0

#
# end of file
#
